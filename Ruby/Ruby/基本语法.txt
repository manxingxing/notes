Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-10-06T13:28:35+08:00

====== 基本语法 ======
Created 星期六 06 十月 2012

===== 操作符 =====

==== 注释 ====

=== 单行注释： ===
		#


=== 多行注释： ===
	==begin  
	==end


==== 换行 ====
	如果语句太长，可以使用符号   \  换行。 这和shell是相同的。


==== 分隔符 ====

=== 分号	； ===

	**用来分隔**__一__**行中的多个语句**


=== 圆括号	() ===

	* 提高优先级；
	* 函数/方法调用和定义


=== 空格/分隔字符	"　" ===
	* 方法/函数调用时，代替()


=== 逗号	, ===
	* 参数列表
	* 或者逗号表达式：
		''a,b = [1,2]''


=== 点	. ===
	方法调用


=== 双冒号	:: ===
	域作用符，将模块(类)与它的常量隔开


==== 算术操作符 ====

+	-	*	/	
+=	-=	*=	/=

** 	乘幂，类似于R里的 ^
>>、<<
	右移、左移 

&
	位与

^  |  
	位异或、位或

 __..__   __...__
Range类。区间的开始点到结束点


* 算术运算类似于C，整数与整数相除，结果仍是整数。浮点与整数相除仍是浮点。

==== 赋值操作符 ====
	 
	=
	
* 在赋值时，赋值操作符两边会具有相同的object_id。
* Fixnum，true,false, nil 对象的object_id和值有关。同样的值有同样的id。也就是说所有值相同此类对象具有相同的id。
* 相同的Symbol具有相同的id
* 每个string字面量的id都不同。即使内容相同。

==== 逻辑比较运算符 ====
	
	==	!=
	>	<	>=	<=
	a<=>b	前面的大则返回1，后面的大则返回-1，相等返回0
	.between?() 方法，适用于数字和数字变量
	defined?()	是否已经定义？
	===  主要用于case-when中，对range表示是否在范围内，对regex表示正则表达式是否匹配。对其他对象，和==的意义相同

* 很多逻辑比较操作符既适用于数字，也适用于字符串类。只不过有些逻辑关系在字符串中的含义是不一样的。例如：> 逐个比较字符在ASCII中的顺序。

==== 逻辑关系运算符 ====

	&&  &&=	and
	||	 ||=	or
	!	！=	not

操作符的优先级是比较高的。但and/or的优先级很弱，比 赋值 等操作符都弱。
* 短路求值特征： 
	* && 如果前面为假，则后面不必计算
	* ||	如果前面为真，则后面不必计算
* 运算的值
	* && 结果若为真，则为后面部分的值
	* || 结果若为真，



===== 关键字/保留字 =====

模块定义：module
类定义：　class
方法定义：def，undef
检查类型：defined?
条件语句：if，**then**，else，**elsif**，case，when，unless
循环语句：for，in，while，until，**next，break**，do，**redo**，**retry**，**yield**
逻辑判断：not，and，or
逻辑值：　true，false

空值：　　nil  
异常处理：rescue，ensure  
对象引用：super，self  
块的起始：begin/end
嵌入模块：BEGIN，END  
文件相关：__FILE__，__LINE__
方法返回：return
别名：　　alias

===== 常量 =====

* 常量首字母大写
* 常量定义过之后无法修改
* 常量的作用域限于定义的__当前作用域__，在当前作用域及其内的类/子类内可以访问，但可以在类/子类中覆写。

=== 常量树 ===
常量就像目录树一样，挂在定义它的作用域内，可以像访问路径一样，从任何位置访问，只不过分隔符用的是 ''::'' 


===== 伪常量 =====

	$end
	$:	默认库路径
	$/	默认分界符
	_ _FILE_ _
	_ _LINE_ _
	FIXME: nil
	FIXME: Pi 不是内置常数？


===== 变量 =====

* 变量名以字母或下划线开头。只包含字母，数字或下划线，不含其他字符。

==== 全局变量 ====
* 全局变量的变量名前有 $ 标记。
* 全局变量可以在任意代码内使用。

全局变量很有用，但在Ruby中并不常见。它与面向对象编程的思想无法水乳交融。

	$`		默认使用的引号
	$:		程序库search path
	$/		默认分隔符
	$


==== 局部变量 ====

局部变量创建于"全局空间"或者**方法**内部。
* 局部变量只能在定义的环境中使用，这个限制要比 R 中的词法作用域要强些。
* 局部变量前没有任何标识
* 除非传入作为参数，方法内部不能使用外部环境的变量。

==== 实例变量 ====

对象变量定义在类的声明中。每个对象维护自己的一份变量。
* 对象变量前用@标记
* 对象变量在对象内部访问，方便类内方法间共享数据。
* 类的每个对象维护自己的对象变量，同名但不可相互访问。
* 实例变量和继承机制无关，不会被继承。只在被赋值时，产生。

**全局实例变量**
甚至可以在irb交互环境中，直接使用实例变量。
或在脚本的最外层使用实例变量。

这样的用法其实相当于全局变量。

==== 类变量 ====
和对象变量更大范围的变量，同样在类内定义，但对类的所有对象都通用。
* 类对象前用@@标记。
* 类变量可以在类的所有对象内访问。
* 类的所有对象共用一份变量。
* 类变量可以被继承。子类对所继承的类变量的修改对其父类也可见。**这是一个不好的行为，需要注意，** 在一些情况下，可用**类实例变量**替代。

例子： 存储这个类已经包含多少实例

class Point
	@@n = 0

	def method_name
	end
end


==== 类实例变量 ====
* 和类变量相似，都属于类，而不是单个实例
* 它在方法外定义(方法内定义的是实例变量)，因此不能用在实例方法内，否则会和实例变量混淆
* 因此，一般它只用在某些**类方法**中，如new()
* 和实例变量一样，不会被继承。和继承机制无关

两种定义方法：

class Point
	@n = 0

	def method_name
	end
end

# 为类实例方法添加accessor
class Point << self
	attr_accessor :n
end

==== 作用域 ====

* 作用域是一个编程语言的基础之一。负责symbol查找和匹配。
* 作用域为symbol分组，使得不同用途的symbol彼此隔离。

=== 变量作用域 ===
				定义作用域		定义作用域的		定义作用域的
				 			     子类			    子方法		
**普通变量**		    Y			**N**			    **N**
实例变量/类变量	Y			N				Y
全局变量	 		Y			Y				Y
常量		 		Y			Y				Y

* 常量大写字母开头
* 类变量以@@开头
* 实例变量以@开头
* 常量具有和R中变量相似的作用域规则。普通变量仅在定义的作用域内可用，限制的非常死。

=== 函数作用域 ===

=== block作用域 ===
* 在块中定义的方法，只在块中有效。
* 但可以在块内访问并修改块外的对象。

sum = 0
10.times do |x|
	sum += x
end

=== public, private, protected ===
protected:  同类对象可访问彼此的protected方法或变量。

===== 表达式和语句(expression & statements) =====

* 在Ruby中，几乎所有东西都是表达式，而所有表达式都要有值。print的作用是打印内容到屏幕，没有返回值，那么将会返回nil。
* 和R中一样，逗号表达式的值是最后一个表达式的值？

==== 条件语句 ====

	__falsy: nil 和 false__
	__trucy: 所有其他值都为真__


=== if+elsif+else+end ===

== 后置 ==
如果只有一行，可以把if后置

	puts 'number is less than 20'  if number <20 && number > 0
	puts 'you are a working man ' if  gender == 'male' && (age>18 && age<60)
	puts 'you are not a teenage' unless age < 20


== 前置 ==

	**if** cond **then** statement **end**	#条件和执行语句在一行时不能省略 then

	**if/unless**  判断表达式
			statements
		__elsif__   判断表达式
			statements
		**else **
			statements
	**end**
	
	
	
* if/else 语句可以嵌套

=== 三元操作符 ===

和C中的操作符相同，比较类似于R中的ifelse
	
	判断表达式__?__ A __:__ B
	

=== case 多重分支 ===

**case** 变量
	**when** option1
		statements
	**when** option2
		statements
	**else**
		statements
**end**

* option 可以是 单个值，正则表达式，数组，range，也可以是他们的组合。用逗号隔开。

'''
case 'abcdef'
  when 'aaa', 'bbb'
     puts "aaa or bbb"
  when /def/
     puts "includes /def/"
 end
'''


==== 循环-迭代 ====

=== 迭代变量(iterator) ===

	//5.//**times(&block)**
	//1//**.upto**//(10)//**(&block)**
	//5//**.downto**//(1)//**(&block)**
	//1//**.step**//(10,1)//**(&block)**
	
	我们不向这些**方法**传递数据，而是传递语句。


=== for ===
	''for iterator in [array | hash | rang]''
		''语句''
	end
	
	''for iterator in [array | hash | rang] do 语句  end	# 单行''
	

=== loop(&block) ===
* 类似于R中的 repeat

'''
loop do
'''
	'''
	语句
	end
	'''

=== while/until ===

== 前置 ==

''while cond do''
	语句
''end''

until cond do
	语句
end

* do 可以被换行符或分号替代。

== 后置 ==

**修饰符形式**
* 和前置形式一样，也是先测试条件。
	i = 1
	i *= 2 until i>100

**多个语句时用括号扩起来**
x = 0
(
	puts x
	x = x - 1
) until x ==0

* 注意将这种形式和下面的形式去分开。括号句式仍然会先测试条件
* 与其使用这种句式，倒不如直接使用前置形式更易懂。


**begin/end + while(until)**

* 先执行一遍，再测试条件
* 语句至少会执行一次。相当于do-while
* 这种句式比较违反直觉，不推荐使用。

	**begin**
		代码
	**end** while 条件
	
	**begin**
		代码
	**end** until 条件


==== jumpers: break ，next， redo ====
break从整个循环中退出
next 从当前循环中退出
redo 重做当前循环，从新执行真个循环
 
