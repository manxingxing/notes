Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-06-21T12:13:32+08:00

====== Views ======
Created 星期四 21 六月 2012


===== 产生HTML标签 =====
* 用options hash 代替原来 html的 arg = value 形式

==== link_to ====
	''link_to	->    		<a href> <a/>''
		显示内容
		链接地址
		其他参数


==== css ====

	''stylesheet_link_tag -> 	<link type='text/css' />''
		css 路径
		其他参数


==== js ====

	''javascript_include_tag ->  <script type="text/javascript" src ></script>''
		路径管理：
			1. 如果启用了asset pipeline，则会使用app/assets, lib/assets or vendor/assets 文件夹下的javascript文件，而不是public文件夹。
			2. 如果没有启用asset pipeline，在config/application.rb 中提供了一种管理javascipt文件的方法，将多个js 文件组合在一起。例如，
				''javascript_include_tag ''**:defaults**
				默认代表public/javascript下的jquery.js and jquery_ujs.js文件。
				
				:all 代表所有的js文件。用户可以在 application.rb中自定义自己的组合。


==== img ====
	
	''img_tag		->	<img src alt />''
		图片路径: public/images
		加载失败时显示的内容
		其他参数: 接受<img>其他参数构成的hash



===== yield和layout =====

==== layout ====

=== 为controller选择layout ===
* 默认情况下，controller对应于同名的layout，如果没有对应的layout，则使用application.layout。
* 如果要为controller指定其他的layout，在controller定义中添加：
	''layout "layout_name"''
	

=== 为action选择layout ===
except 和 only 参数。

	''layout "product", :except => [:index, :rss]''
	

=== controller动态选择layout ===
	''layout script_to_generate_layout_name''

	'''
	class ProductsController < ApplicationController
	  layout 
	'''
**:products_layout**
 
		''private''
		''  def ''**products_layout**
		''    @current_user.special? ? "special" : "products"''
		''  end''
	     ''end''


=== 为render选择layout ===
	''render(options, ''**:layout=>"layout_name"**'')''


==== yield ====
使用在layout 文件中

request -> routes -> controller -> view

渲染一个view从controller指定的layout开始。当执行到yield时，插入要渲染的view文件。

Technically, __yield__ is calling a block in this context as well. However, the block is the view your controller action was told to render.

For example, let's say you have a StaticContentController that has an index action on it that represented your home page. With routes configured correctly, you visit your home page. Rails will load the layout file in views/layouts that is appropriate for that controller (application.html.haml, unless you overrode this with a layout for your controller). When it reaches the yield command, it inserts the view at views/static_content/index.html.haml at the location where yield is inside your layout. Then, it loads the rest of your layout file.

== 一个layout多个yield块 ==
一个layout可以用多个yield块，用名称区分。

<html>
	  <head>
		  <%= __yield :head__ %>
	  </head>
	  <body>
		  <%= __yield__ %>
	  </body>
</html>

在view文件中，使用content_for 将一段erb代码插入到特定的yield块。

	<% __content_for :head__ do %>
		  <title>A simple page</title>
	<% end %>


===== render(options = {}, locals = {}, &block) =====

**create full response to send back to brower**

如果在一个action中没有显式使用render，那么会自动render action对应的view文件。

另外还可以render其他的文件。

==== options: ====

=== action ===
	选择同一个controller下其他的 action对应的view文件.

	
	''render :action=> ""''
	''render :edit''
	
		'''
		def create
		'''
			'''
			if !new_record.save
			'''
				'''
				render "new"
				'''
			'''
			end
			'''
		'''
		end
		'''

=== template ===
	* 选择另一个controller下某个 action对应的view文件

	''render :template=> "controller/action"''
	''render :template=>"shared/micropost"''


=== file ===
	任意路径的view文件。
	inux 下 可不加 :file 键名，可根据 路径 特点推断。
	
	**关于layout**
		* **file is rendered without the current layout**
		* 设 :layout=>true 使用当前layout，或者指定其他layout

__上述三种方式根据 路径特点分开。__



=== partial ===
partial文件一般以 下划线 _____ 开头, 后缀是 __.html.erb。 用以和action对应的view文件区分开。
	''render :partial => "path/to/file"''

* path已经在app/views/路径下。前面的路径部分可以省略
* 文件名省略后缀。

== locals 参数 ==
向local中传递任意变量。
	''render :partial => "form", :locals => { :zone => @zone }''


== object参数 ==

* 每一个partial中都可以有一个与partial名称(去除后缀和前导 _ 符号) 的变量。使用object参数给这个local variable赋值
	''render :partial => "customer", :object => @new_customer''
   当object变量的名称和partial一致时，可简写成：
	__render @var__
   相当于：
	render :partial=>var, :object=>@var
	
== collection参数 ==

When you pass a collection to a partial via the :collection option, the partial will be inserted once for each member in the collection.

	''render :partial => "product", :collection => @products''
相当于：
	render @products
这时，partial中和partial名称相同的变量(单数)依次取collection的每个元素。

会根据@products 类型判断，是collection还是object参数。如果是一个enumerable类型，则是一个collection.

In the event that the collection is empty, render will return nil, so it should be fairly simple to provide alternative content.
'''

<h1>Products</h1>
<%= render(@products) || 'There are no products available.' %>

'''
''使用collection时，在partial中会自动生成一个counter变量，表示当前partial已经渲染的次数。变量的名字是 collection单数形式后接_counter。''

**Rails make a counter variable available within a partial called by the collection, named after the **__member of the collection followd by counter__

== as 参数 ==

给 partial同名参数换个名字。

== :spacer_template参数 ==
当使用collection时，在相邻的两个partial间插入另一个partial。
	''render :partial => @products, :spacer_template => "product_ruler"''


=== :text	=>"" ===
#纯文本，非HTML

=== :nothing=>true ===


=== :inline=> "erb script" ===
		#把erb, builder或其他类型代码  嵌入到controller中。


=== Mime ===
:json=> @var
:xml=>@var
**自定义MIME，可以用于文件下载。send_data**


===== redirect_to(options = {}, response_status = {}) =====

**重定向到另一个地址**

options:  任意地址的表示方式
response_status: 表示是否成功的数字代码，例如200表示成功。500表示失败。

==== 地址的表示方法： ====

=== url ===

完整url
	"http://www.rubyonrails.org"
不包含host的字符串，会使用默认的protocol, host, port 。
	"/images/screenshot.jpg"


=== 隐式调用url_for ===
**url_for可以为多种类型表示方法生成url**

一些参数有：
	:**host**
	:**protocol**

	:**anchor**	#Specifies the anchor name to be appended to the path. 
	:**trailing_slash**	If true, adds a trailing slash, as in “/archive/2005/“


== 使用关键词 ==


	:controller 
	:action
	:id
	
例子：
	''redirect_to :action => 'index'	#=> /current_controller/''
	''redirect_to :action => 'find', :controller => 'books'	#=> /books/find''
	''redirect_to :action => 'play', :anchor => 'player'		#=>/messages/play/''**#player**
	''redirect_to :action => "show", :id => 5	#=> /books/5''


== 变量 或者 routes path/usrl ==


	''redirect_to @workshop		#=> /workshops/5	#调用了@workshop.to_s''
	''redirect_to 	[@magazine, @ad]	#=> /magzine/4/ad/2	#调用url_for''
	
	''redirect_to photos_path		#=> /photos''


=== :back ===

- Back to the page that issued the request. Useful for forms that are triggered from multiple places. Short-hand for redirect_to(request.env["HTTP_REFERER"])

可以在redirect_to的同时传递flash消息。例如：



===== head =====
**create response consisting solely of http headers to send back to the browser**



===== View Helper =====
provides small snippets resuable methods for **views**
路径：
	app/help/
* 每个controller都会有一个对应的helper文件。
* helper method 在 view 中自动可用，但在Model 和 controller 中是不可用的。要显式使用include包含进来。


===== Conventions =====
* 一个controller的所有action对应于一个layout文件。如果不存在则使用applicate.layout
* 在一个code path中，只能有一个render 或 redirect_to。
