Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2013-03-05T13:48:23+08:00

====== Bundler & Gemfile  Rails 启动过程 ======
Created Tuesday 05 March 2013

__作用是 解析gems之间的依赖关系，选择满足依赖的gem版本，并从指定的源下载安装__

http://gembundler.com/man/gemfile.5.html

===== Gemfile =====

==== 设定源 ====

=== URL: 从托管网站安装，这是大多数的情况 ===
	''source 'http://rubygems.org'''
	''source :rubygems		# shortcut 形式''
	''source 'http://ruby.taobao.org/' 淘宝镜像''


=== git： 从gem的github库安装 ===
* 有inline 参数 形式，也有command形式
(1) 如果一个github库包含多个gemspec文件，亦即包含了多余一个gem(就像Rails的github库一样)：

'''
git "git_repo" do
'''
	'''
	gem 'name'
	end
	'''
(2) 如果仅有一个gem(这是大多数的情况)
     ''gem name, :git => "git_repo"''

=== path: 从本地文件夹安装 ===
* 用inline形式，也有command形式
gem name, :path => "path"

==== 设定版本 ====
>
>=
<
<=
~>		最低级别的版本号可以增加，前面数字锁定. 例如： 
		~> 2.1.0  表示 >= 2.1.0 & < 2.2
		～> 2.2.beta 表示 2.2  的各个beta版本，但 < 2.3

1.1
1.1.0
1.1.beta
1.2.beta.3
1.3.alpha
3.0.pre.3

==== require参数 ====
当gem名称和它对应的要加载的文件名称不一致时，使用 require参数
	''gem name, :require => "这个名称会用做require命令的参数"''


==== 分组 ====
* group既有inline形式，也有command形式
* 所有未指定group的gem属于组default
分组可以在不同条件下加载不同的gem，以及选择性不安装特定组内的gem。例如：开发时使用sqlite，但deploy时使用Pg

'''
group :development do
   gem sqlite3
end
group :production do
   gem pg
end
'''


=== Tips ===
**根据平台类型分组**
group :darwin do
  gem 'rb-fsevent'
  gem 'growl'
end

group :linux do
  gem 'rb-inotify'
end

在config/application.rb ：

platform = RUBY_PLATFORM.match(/(linux|darwin)/)[0].to_sym
Bundler.require(*Rails.groups(platform, :assets => %w(development test)))


===== Bundler =====
一个管理gem间版本依赖关系的工具

==== 管理gem ====

=== 命令集 ===

'''
bundle install			install gems from Gemfile or Gemfile.lock
bundle update			update dependencies to their latest versions
bundle package			pack gems into vender/cache
bundle exec			execute a script in the context of bundle
bundle check			check dependencies
bundle list
bundle show
'''


=== bundle install 和 update ===

修改Gemfile后运行bundle install 会更新修改的gem至指定版本，同时更新它的依赖包。但是如果某个依赖包同时被Gemfile中的其他gem依赖，则尽量不更新这个依赖包。如果必须更新这个依赖(也就是出现了冲突)，则给予用户相应消息。

随着开发的进行，gem作者可能推出了更新版本，但由于bundle install 是保守的更新方式。除非用户明确要求更新gem，gem版本一直维持在之前可用的版本上。

bundle update gem 会更新指定gem到Gemfile中所允许的最新版本，不会动Gemfile, 但会修改Gemfile.lock。update过程同时会更新其依赖包至最新版，而不管这些依赖包是否还被其他gem依赖着。所以update可能出现过度更新的情况，亦即有些gem更新后，可能application代码也需要做些修改。

bundle update 会更新所有gem及其依赖包至最新版本，这个动作有点危险，因为出现过度更新的可能性更大了。


==== 加载Gemfile中指定的gems ====

''require 'bundler/setup'''
''Bundler.require(*组名称数组) #''__其实就是对Gemfile中的所有gem逐一调用require命令__

例如：
Bundler.require(:default, Rails.env) 会加载default组内的gem，以及当前环境对应组内的gem

=== Rails.group 方法 ===
''Rails.groups(:assets => [:development, :test] )''

如果当前环境是development，那么返回
	[:default, :development, :assets]
如果是production, 那么返回
	[:default, :production]



===== 启动序列 =====
1. boot.rb 
	加载rubygems
	加载Bundler
2. application.rb
	加载boot.rb
	加载Rails
	加载gemfile中的gems
	全局配置
3. environment.rb
	加载application.rb

4. config.ru
