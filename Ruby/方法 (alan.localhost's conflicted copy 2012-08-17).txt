Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-05-12T15:07:49+08:00

====== 方法 ======
Created 星期六 12 五月 2012

FIXME: 方法类似但不同于R中的函数。R的函数遵循函数的作用于，参数传递是 值传递，除非使用 <<- 操作符，不能修改函数外部的变量。Ruby中的方法则不然。Ruby传参数都是传引用。
	* 如果你在方法里面对该引用调用了带感叹号的函数，那就改了。
	* 如果直接修改了对象的内容，也是改了
	* 如果把修改后的内容赋值给同名对象，这个新对象实际上是个局部变量。这时没有修改！

def fake_modify!(str)
   str = str.upcase
end
def real_modify1!(str)
   str[0] = 65.chr
end
def real_modify2!(str)
   str.upcase!
end

===== 公共方法 =====
	
	.class: 查询变量的类
	.class.superclass
	.methods	查看一个对象的所有方法
	.instantce_variables	对象的实例变量(非类变量)
	.inspect
	

===== 定义 =====
	**def**	functionname(args)
		....
	**end**
* 可以有默认参数。参数在方法调用时求解
* 可选的数组参数(带*的参数)必须放在所有的数组参数的后面
* 方法的返回值规则和R一样。return语句将从该位置退出方法，并返回指定对象。
* **习惯约定**：表示查询的方法通常以__?__结尾；会修改接受者对象的方法，以__!__结尾；赋值方法以__=__结尾。(只是约定，不是说加个符号就行的)

==== 参数处理 ====

=== 参数默认值 ===

和R相同

=== 可变个数参数 ===
类似与R中的 ''...'' 形参

**可变个数参数**或者想用**一个形参接受多个实参**，在"普通"的参数名前放置一个(***)号即可。**这个带星号的参数必须放置在**普通参数_**后面，Ruby设置数组参数使其引用一个数组类的对象。如果参数超过普通参数的个数时，所有剩余的参数会被装入到一个新的Array对象中，但是,如果没有超过普通参数，则该数组是个无内容的对象，但对象本身不为nil。如果，数组参数跟在带默认值的参数后面，那么参数优先被用了override默认值， 剩下的形成数组 。

=== 代码块(block)参数 ===

1. block参数(在普通的参数名前放置一个&符号)必须放在参数列表的**最后一个**。无论何时调用该方法时，都会检查是否有关联的块。如果有，块将被转换成Proc类的对象，然后赋值给块参数。如果没有块，该参数将设置为nil。
   使用&block 参数时，内部用block.call() 方法调用代码块处理对象
2. 不设明显的block参数，在方法内部使用yield方法 将数据提交给代码块。在方法中使用： defined? yield 来判断是否传入了代码块。

def make(thing)
	 puts '准备工作'
	 **yield**(thing)
	 puts '收工动作'
end


=== hash参数 ===

* 參數尾部的Hash可以省略**{ }** 符号。
* When hashe**s** are the last argument in a function call, the curly braces are optional; 

def initialize(options)
	@name = **options[:name]**|| "Unamed Bot"	#除了nil和false之外，其他都不为假
	begin
		@data = YAML.load(File.read(options[:data_file]))
	rescue
		raise "Can't load bot data"
	end
end

==== 定义操作符 ====


===== 方法调用 =====

	[''obj.]method(parameters)''
	
	* 参数间用逗号分开。
	* 这样省略括号，在method和参数间简单地用空格分开。
	* parentheses  are optional;

块参数：
	''[receiver.]method(parameters)[block]''  
	或者：
	''[receiver.]method(parameters) do''
		''[block]''
	end

	或者：
	''receiver._ _ send_ _(:method,args)''
	''receiver.send(:method,args)''
		receiver.send("methodname".to_sym, args)
	这种形式适合于当''method''从一个变量获取时。
	
	* 和R中的 call / do.call比较相似。
	


