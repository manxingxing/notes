Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-09-26T14:15:22+08:00

====== JQuery ======
Created Wednesday 26 September 2012

===== 文档就绪函数 =====
需要包装在这个函数里
'''
$(document).ready(funcion(){
'''
	'''
	$(selector).event(function(){
	     $(selector).action();
	});
	});
	'''

===== 节点 =====
each(function)
map(function)
get	map返回的是JQuery数组，用get()转换成Javascript数组。

==== 遍历 ====
length或size

each(callback)
	* callback是一个函数，有两个可选参数：当前元素在被选中元素集合中的位置(index)，当前元素本身(也就是this)。
	* this是个**DOM对象**，用$(this)可以转换成JQuery对象。
get()	# 返回匹配的DOM对象**数组**
get(index) # 返回匹配集合中的指定位置的DOM对象

==== 数据 ====
**查询**
$(selector).data()  列出所有数据
$(selector).data("key")
**设置**
$(selector).data("key", value);
$(selector).data({key:value, key:value});
**删除**
$(selector). removeData("key", value)
**判断**: 返回true, false
jQuery.hasData(element)

==== 队列 ====
查询
queue("fx")	默认是"fx"
queue(name, callback)
queue(name, queue)
dequeue(name)	从队列最前端移除一个队列函数，并执行他。
clearQueue([queueName])

$冲突
var bla = jQuery.noConflict()
之后就可以用bla取代 $ 使用了。

==== 判断 ====
hasClass
is(selector|DOM|obj|function(index))
hasData(key)


===== selector =====
Xpath和CSS选择器的组合

==== this ====
''$(this)''
	this 是事件发生的对象元素
$() 将this对象转化成jquery对象。


==== 基本选择器 ====

=== 元素选择器 ===
$("div")

=== 类选择器 ===
$(".class")

=== ID选择器 ===
$("#id")

=== * 选择所有内容 ===
$("form *")

=== 用 逗号 连接多个选择器 ===
$("selector1,selector2,selectorN")

==== 几个集合 ====

=== 表单类 ===
document.forms

:input
:text
:password
:radio
:checkbox
:submit
:file
:reset

:image  image类表单域
:button

:enabled
:disabled
:checked
:selected
:focus


:hidden 不可见元素，如display:none, visiblility: hidden, type="hidden" 的表单元素
:visible
:animated

=== 其他元素 ===
:header


==== 按特征筛选 ====

=== 按属性筛选 ===
[attr]
[attr=value]
[attr!=value]  # 不等
[attr^=value]  # 以...开头
[attr$=value]  # 以...结尾
[attr*=value]  # 包含...
[attr~=value]  # Attribute Contains Word Selector. Selects elements that have the specified attribute with a value containing a given word, delimited by spaces
[attr|=value]  # Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).

== 使用多个属性选择器 ==
多个属性可以连在一起使用:  
[attr1][attr2$=value]

=== 按index筛选 ===

== 在匹配结果中的位置，从0起算 ==
:first  # 只返回一个结果
:last   # 只返回一个结果
:eq() # 从0起算
:gt # 从0起算
:lt  # 从0起算
:odd  
:even 

== 相对于父元素的位置，从1起算 ==
:first-child
:last-child
:nth-child(even)  # 从0起算
:nth-child(odd) 
:nth-child(3n)
:nth-child(2)
:nth-child(3n+1)
:nth-child(3n+2)
:only-child


=== 按选择器筛选 ===
:not()

=== 按内容筛选 ===
:contains() 包含给定文本？
  

==== 按子代筛选 ====
:has(selector)
:parent   # 不管子代有什么，只要有子代就行。注意文本也是子节点，因此这个选择器实际上选择除末端节点外的所有节点。
:empty()  # 选择末端节点。如一些表单元素.

==== 按父代筛选 ====
ancestor descendant
parent > child

==== 按sibling筛选 ====
prev + next   # 前面紧接着有prev的next元素
prev ~ siblings # 不包含在prev里面的，在prev后面的所有sibling元素

===== 获取匹配结果的子集 =====

==== 根据位置 ====
eq(index)
first()
last()
slice(start, end) # 不包括end

==== 根据自身selector ====
not(expr)
filter(expr)

==== 根据子代 ====
has()

==== 对匹配结果进行增加的微调 ====
.add()
.andSelf()

===== transverse =====

==== 向上层遍历 ====
parent(expr)     # 父代，仅父代元素
parents(expr)    # 祖代，从父代开始向上级寻找，返回所有级别的祖代元素
closest([expr]) # 最近的匹配，从自身开始向上级寻找，直到找到为止
parentsUntil(expr)  # 直到但不包括
offsetParent()  # 第一个postion不是static的祖代元素

==== 向子代 ====
find(expr)      # 后代
children([expr])  # 子代，不包括文本和注释节点
  
find 和 children的区别。
1：children及find方法都用是用来获得element的子elements的，两者都不会返回 text node，就像大多数的jQuery方法一样。 
2：children方法获得的仅仅是元素一下级的子元素，即：immediate children。 
3：find方法获得所有下级元素，即：descendants of these elements in the DOM tree 
4：children方法的参数selector 是可选的（optionally），用来过滤子元素，但find方法的参数selector方法是必选的。 
5：find方法事实上可以通过使用 jQuery( selector, context )来实现：英语如是说：Selector context is implemented with the .find() method; therefore, $('li.item-ii').find('li') is equivalent to $('li', 'li.item-ii').

==== 同辈 ====

=== 向后 ===
next([expr])    # 紧跟的同辈元素
nextAll(expr)   # 后面所有的同辈元素
nextUntil(expr) # 直到但不包括

=== 向前 ===
prev(expr)      
prevAll(expr)
prevUntil(expr) # 直到但不包括

=== 所有 ===
siblings(expr)  # 前后所有的同辈元素

==== stack and chaining ====
.end()
.andSelf()

===== 属性 =====

==== Attr ====
查询或改变选择元素的CSS属性。
attr(name)
attr(name, value)				# 设置一个属性的值
''attr({properties})''               #以key-value对的形式批量设置元素的属性。
''removeAttr(name)''     	 #删除属性及其值。

==== css 属性 ====
* FIXME: 和上面非常相似, 不同的是返回值的形式
* 将根据浏览器, 为私有属性自动加上前缀(在适当的时候), 比如("user-select", "none"); 在Chrome/Safari浏览器中我们将设置为"-webkit-user-select", Firefox会使用"-moz-user-select", IE10将使用"-ms-user-select".

**查询**
	''.css(property)''
**设置**
	''.css(property, value)''
	''.css({properties hash})''


==== class ====

hasClass(class)	#**判断**是否有class
addClass(class)	
removeClass(class)
toggleClass(class)	# 如果存在（不存在）就删除（添加）一个类。
toggleClass(class, switch)	# switch : 一个值为boolean的表达式

==== 位置 ====

=== 在视口坐标系中的位置 ===
不需要用jquery，用
element.getBoundingClientRect()就行

=== 在文档坐标系中的位置 ===
offset : 获取/设置匹配元素在当前视口的相对偏移

offset().top
offset().left

**设置**
* 必须同时设置top和left
* 不带单位时，假设为px
* 原理：设元素的position属性为relative，并设置top/left值
offset({top: value, left: value})	# 也可以是返回位置hash 的函数。

=== 相对父元素的位置 ===
* 不能用来设置
position().top
position().left

=== 滚动条位置 ===
* 所选择元素的滚动条上 上面或左面 的被隐藏的高度/宽度
scrollTop(value)
scrollLeft(value)
**设置**
* $(document)的scrollTop/scrollLeft即是窗口滚动条的位置。
* scroll to position 功能.
scrollTop(value)
scrollLeft(value)

==== 尺寸 ====
* 返回不带单位的数字，适于数学计算

=== content size ===
.height(value)	# 获取或设置
.width(value)	# 获取或设置

=== content+padding ===
.innerHeight()
.innerWidth()

=== content + padding + border + margin ===
.outerHeight([includeMargin?])	# 参数是 boolean值，当true时，把margin也计算在内。
.outerWidth([includeMargin?])


==== value ====

$(selector).val([content])       #获取或设置value值。对表单控件。
$(selector).val(array)		   #check,select,radio等每个选项都能使用为之赋值

==== text ====
$(selector).text([content])     #获取或设置文本节点。

==== html ====
$(selector).html(content)      #获取或设置，可包含html标签。

===== 效果 =====

* 都有参数speed(ms, slow, normal, fast)  和callback 参数

''hide''
''show''
''toggle([switch])	# 可选参数switch是个值为boolean的表达式''

slideDown
slideUp
slideToogle

fadeIn
fadeOut
fadeToggle()
''fadeTo(speed, opacity, callbak)''     #fade到指定的透明度. opacity是0-1之间的数字

=== 自定义动画 ===

''$(selector).animate({params},[duration],[easing],[callback])''

	* 有点类似css 里的transition

== params ==
* params是由样式组成的hash对象。
* 仅限于值为数值类型的CSS属性，颜色渐变需要安装有jquery-color插件。
* **scrollTop, scrollWidth, opacity**也可以使用
* 所有指定的属性必须用camelCase形式，比如用marginLeft代替margin-left
* 一些shorthand属性支持的并不好。
* 将根据浏览器, 为私有属性自动加上前缀(在适当的时候), 比如("user-select", "none"); 在Chrome/Safari浏览器中我们将设置为"-webkit-user-select", Firefox会使用"-moz-user-select", IE10将使用"-ms-user-select".

== value ==
* 数值
* "show", "hide", "toggle"
* 相对值 "+=10", "-=10"

== easing ==
* swing
* linear
可以为每个property-value设置easing function,形式为：
	''animate({ property: [value, easing] , property: [value, easing] })''


== queue:连接多个动画 ==
queue = true/false, 当为 false时，该动画和后面位置的动画同时开始。

'''
.animate( { width: "90%" }, { 
'''
**queue: false**'', duration: 3000 })''
''     .animate({ fontSize: "24px" }, 1500 )''
''     .animate({ borderRightWidth: "15px" }, 1500 );''
对这个例子来说，宽度和字号变化同时开始，字号动画先结束，结束后，边框动画开始。

===== 事件 Event =====
Listener/Observer
* 接受一个事件处理函数做参数。
* 在事件处理函数中，使用event.stopPropagation（)来阻止事件冒泡。
* 在事件处理函数中，使用event.preventDefault() 取消默认行为
* 在事件处理函数中，返回 false 同时取消默认行为，并阻止事件冒泡。

mouseover   # 在元素及其子元素上方都会触发
mouseout     #

mouseenter     #只有元素本身时才会触发(?)
mouseleave     

mousedown     #按下按钮
mouseup
click
dbclick

focus          # 输入框等元素获得焦点
blur             # 失去焦点

focusin	# 类似focus，但会bubble
focusout	# 类似blur, 但会bubble

change     #输入框，文本域，选择框的变化。

keydown	# 任意键的按下事件，长按只会激发一次handler
keyup
keypress	# 和keydown类似，但对应于字符输入，只有字符输入的键盘事件才激发handler

submit

scroll
resize

select          #输入框，文本域内文字被选中时。

load

''$(selector).toggle(function1(),function2(),functionN(),...)''

toggle() 方法用于绑定**两个或多个事件处理器函数**，以轮流响应被选元素的 **click** 事件。当指定元素被点击时，在两个或多个函数之间轮流切换。

如果规定了两个以上的函数，则 toggle() 方法将切换所有函数。例如，如果存在三个函数，则第一次点击将调用第一个函数，第二次点击调用第二个函数，第三次点击调用第三个函数。第四次点击再次调用第一个函数，以此类推。

该方法也可用于切换被选元素的 hide() 与 show() 方法。

===== 节点操作 =====

==== 创建新的节点 ====

'''
$(html, [ownerDocument])
jQuery(html, props)
'''


创建dangling节点的同时，可设置jquery对象的属性和事件绑定函数，例如：
'''
$("<input>", {
  type: "text",
  val: "Test",
  focusin: function() {
    $(this).addClass("active");
  },
  focusout: function() {
    $(this).removeClass("active");
  }
}).
'''


=== 在内部插入子元素 ===

'''
  target.append(content, [content])     #子节点级别最后面
target.prepend(contents)   #子节点级别最前面
'''


* Supported **contents** includes **DOM** elements, **jQuery objects**, **HTML strings**, and **arrays of DOM elements。**

'''
content.appendTo(target)
content.prependTo(targe)
'''

* **target**: A selector, element, HTML string, or jQuery object



=== 在外部插入父元素 ===
* wrappingElement: An HTML snippet, selector expression, jQuery object, or DOM element。可以包含嵌套的元素，但最内层元素只能有一个，以便包裹选中的元素。



$(selector).wrap(wrappingElement)			# 用wrappingElement包围**每个**被选中的元素,wrappingElement位于外层
$(selector).wrapinner（wrappingElement）		# 用wrappingElement包围**每个**被选中的元素的**内容**。wrappingElement位于里层

$(selector).wrapAll(wrappingElement)			# 用wrappingElement包围**所有**被选中的元素，组成一个整体。

$(selector).unwrap()						# 无参数，去除**每个**被选中元素的parent节点


=== 插入同辈元素 ===
* **content**: HTML string, DOM element, or jQuery object to insert after each element in the set of matched elements.
* **target: **A selector, element, HTML string, or jQuery object; the matched set of elements

'''
target.after( content [, content] )    #在每个被选中元素后面增加同辈元素
target.before(content [, content] )   	 #前面增加 sibling  element
'''


'''
$(content).insertAfter( target)    
$(content).insertBefore( target)
'''
     

==== 替换 ====
* **content**: an HTML string, DOM element, or jQuery object.
.replaceAll(selector)		 # 用匹配的元素替换掉所有 selector匹配到的元素
replaceWith(content)		# 将所有匹配的元素替换成指定的HTML或DOM元素

==== 删除元素 ====
* **selector: **A selector expression that filters the set of matched elements to be removed

.remove( [selector] )           # 从被选择的元素中删除selector匹配的部分。当没有参数时，删除所有被选择的元素及其字节点，同时删除 data。
.detach( [selector] )            # 和remove相同，但不删除data，这样删除的部分，还可以复原.
.empty()				    # 删除所有子节点， 但不删除元素本身
.unwrap()			    # 删除所选元素的父节点, 不删除元素本身

==== clone([withDataAndEvents, deepWithDataAndEvents]) ====
* 克隆时，所有子节点都会一起克隆
* **withDataAndEvents**: A Boolean indicating whether event handlers and data should be copied along with the elements. 默认false, 即克隆html代码，不复制data 和 事件绑定函数
* **deepWithDataAndEvents**: A Boolean indicating whether event handlers and data for **all children** of the cloned element should be copied. 默认false
.clone( [withDataAndEvents] [, deepWithDataAndEvents] )


===== Ajax =====

