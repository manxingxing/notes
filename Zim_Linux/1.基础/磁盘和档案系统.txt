Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-04-28T00:08:24+08:00

====== 磁盘和档案系统 ======
Created 星期六 28 四月 2012

===== 磁盘 =====

磁盘可能有一张或多张圆盘组成，即所谓的单碟和多碟硬盘。

在硬盘上的一个圆周称为磁轨(磁道)。磁道上又可细分为很多扇区，每个扇区的大小约为512B左右。

多张盘上同一半径的磁道合称磁柱。

扇区是最小的存储单元，磁柱是分区的基本单元。

	扇区：sector	磁道：track
	磁轨：cylinder

分区即为两个磁柱间的圆盘区域，因此**一个分区由起始磁柱和终止磁柱定义**。

**一个磁盘的第0轨上存储这磁盘的分区信息**，有时**MBR**(master booting recorder)也会记录在这里。一旦这个区域损毁，整个硬盘也就挂掉了。

第0轨的存储容量是非常有限的。**因此它只允许最多4个主分区或者3个主分区+1个扩展分区**。

===== 档案系统 =====

不同分区可以格式化为不同的档案系统。例如FAT,NTFS, ext2等。

一个扇区的容量仅有512B。对于大容量文件，这需要相当多的磁头读取次数。因此需要将扇区合并为逻辑区块(block)。区块一般是扇区的2的此方的倍数，值越大，存取所耗的磁头动作就越小，但磁盘的利用效率也越低，因为比该block小的文件部分也需要占用整个区块。

上述将扇区分割为区块的过程就是格式化。

分区的起始block是个super block，存储这该分区的档案系统信息，block 大小，剩余block大小等。一旦这个区块损毁，这个分区也就挂了。

==== ext2 档案系统 ====

ext2 档案系统中，硬盘被分为innode table和block area两个区域，每个innode都指向某个档案或者。对档案文件来说，innode 区域存储其权限、时间等信息，block area 存储其内容，block 的容量既是档案大小；对目录来说，innode是该目录的节点，block area则存储目录下 档案或目录 的 innode 及 文件名。

* 格式化时，设置好block size，就已经确定了innode和block的数量。
* 由于每个档案或目录必须有一个innode，所以，一个分区容纳的档案数目是受innode数目限制的。
* block 为固定大小，一般为1,2,4KB。
* 一个innode 本身要占用约128B，innode table区域本身也要占用一定的空间。
* block 的大小影响单个文件的最大容量和单个分区的最大容量。若block size = 1K，则最大单个档案为16G ，分区最大为2T。

==== 异步存取和ext3 ====

相比于CPU,和内存，硬盘是速度最慢的步骤。为了提高硬盘读写的效率，Linux采用异步存取的方式，即：当需要更改硬盘上的内容时，内存内的数据首先更改，但并不马上反映到硬盘中，在合适的时间再同步到硬盘中。当意外断电时，就可能造成内存中的数据无法同步到硬盘中，造成数据损毁。

ext3 是在ext2基础上增加日志功能。使用tune2fs工具可以给ext2增加日志功能，而成为ext3。这时异步存取的过程是：当需要更改硬盘上的内容时，首先标记文件状态为dirty, 内存内的数据首先更改，同步到硬盘中后，文件状态再恢复为clean。这些日志可用来修复毁损的数据。使用的工具使fsck(filesystem check)。
